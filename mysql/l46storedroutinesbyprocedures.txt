=> Stored Routines 
(i) PROCEDURE (we can call stored procedure)
   (a) IN = Input parameters  
   (b) OUT = Output Parameters 
    (c) INOUT = Inout Parameters

 (ii) function
     (a) Builtin function
     (b) User Define function
          (i) Input Parameters(function can be with Parameters or Without Parameters / function always return only 1 value)

      --------------------------------------------------------------------------------

(I) PROCEDURE (we can call stored procedure)

CREATE TABLE IF NOT EXISTS capitals(
   id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
   date DATE NOT NULL,
   name VARCHAR(50) NOT NULL,
   amount DECIMAL(10,2) NOT NULL,
   payment ENUM('MMK','USD') NOT NULL,
   accounts ENUM('credit','debit') NOT NULL
);

DESC capitals;
SHOW CREATE TABLE capitals;
SHOW INDEX FROM capitals;

INSERT INTO capitals(date,name,amount,payment,accounts)
VALUES('2024-06-20','mr.tin',500000,1,1),
('2024-06-21','ms.july',300000,1,1),
('2024-06-21','ms.july',200000,1,1),
('2024-07-1','mr.tin',1000,2,1),
('2024-07-2','mr.tin',3000,2,1),
('2024-07-2','mr.july',3000,2,1),
('2024-07-5','mr.tin',1000,2,1),
('2024-7-6','mr.tin',1000,2,1),
('2024-7-10','mr.tin',200000,1,2);

SELECT * FROM capitals;


=>Capital by MMK

SELECT name,SUM(amount),payment,accounts
FROM capitals
WHERE accounts='credit' AND payment ='MMK'
GROUP BY name;



=>Capital by USD

SELECT name,SUM(amount),payment,accounts
FROM capitals
WHERE accounts='credit' AND payment ='USD'
GROUP BY name;


CREATE VIEW vw_capitalbymmk AS
SELECT name,SUM(amount),payment,accounts
FROM capitals
WHERE accounts='credit' AND payment ='MMK'
GROUP BY name;


CREATE OR REPLACE VIEW vw_capitalbyusd AS
SELECT name,SUM(amount),payment,accounts
FROM capitals
WHERE accounts='credit' AND payment ='USD'
GROUP BY name;


SHOW FULL TABLES WHERE TABLE_TYPE LIKE 'VIEW';

SELECT * FROM vw_capitalbymmk;
SELECT * FROM vw_capitalbyusd;

=>Capital by accounts

SELECT date,name,amount,payment,accounts
FROM capitals
WHERE accounts ="credit"
ORDER BY date DESC;

SELECT date,name,amount,payment,accounts
FROM capitals
WHERE accounts ="debit"
ORDER BY date DESC;



DELIMITER //
CREATE PROCEDURE cpreportaccounts_proc(p_acc VARCHAR(10))
    BEGIN
         SELECT date,name,amount,payment,accounts
         FROM capitals
         WHERE accounts =p_acc
         ORDER BY date DESC;
    END; //

DELIMITER ;


SHOW TABLES;
SHOW FULL TABLES;

SHOW TRIGGERS;

=>SHOW
SHOW PROCEDURE STATUS WHERE DB="sqlclass";


*error
CALL cpreportaccounts_proc();

CALL cpreportaccounts_proc('Credit');
CALL cpreportaccounts_proc('debit');



=>DROP
DROP PROCEDURE STATUS IF EXISTS cpreportaccounts_proc;




-----------------------------------------------------------

DELIMITER //
CREATE PROCEDURE cpreportbydate_proc(IN p_date DATE)
    BEGIN
         SELECT date,name,amount,payment,accounts
         FROM capitals
         WHERE date =p_date;
      
    END; //

DELIMITER ;

SHOW PROCEDURE STATUS WHERE DB="sqlclass";

CALL cpreportbydate_proc("2024-07-01");
CALL cpreportbydate_proc("2024-07-10");

-----------------------------------------------------------

=> Input and Output Parameters

SELECT * FROM customers;

SELECT COUNT(*) FROM customers
WHERE cty = "bago";

SELECT COUNT(*) FROM customers
WHERE cty = "yangon";

DELIMITER //
CREATE PROCEDURE totalcurreportbycity_proc(In p_city VARCHAR(50),Out p_totalcu INT)
BEGIN
     SELECT COUNT(*) INTO p_totalcu FROM customers
     WHERE city = p_city;
 
END; //
DELIMITER;



SHOW PROCEDURE STATUS WHERE DB="sqlclass";

*error 
CALL totalcurreportbycity_proc("bago");


SET @totalcustomer := 0;
SELECT @totalcustomer;

CALL totalcurreportbycity_proc("bago",@totalcustomer);

SELECT @totalcustomer;

-------------------------------------------------

=> INPUT and Multi Output Parameters

SELECT * FROM customers;

SELECT MIN(amount),MAX(amount),city FROM customers
WHERE city="yangon";

DELIMITER //
CREATE PROCEDURE minmaxcity_proc(In p_city VARCHAR(50),
Out p_minamount INT,
OUT p_maxamount INT)
BEGIN
     SELECT MIN(amount),MAX(amount) INTO p_minamount,p_maxamount FROM customers
     WHERE city = p_city;
 
END; //
DELIMITER ;



SHOW PROCEDURE STATUS WHERE DB="sqlclass";


SET @min :=0;
SET @max :=0;

CALL minmaxcity_proc("yangon",@min,@max);

SET @min :=0;
SET @max :=0;

CALL minmaxcity_proc("yangon",@min,@max);

SELECT @min,@max;

SELECT (@min-@max) AS "minus diffamount";

-------------------------------------------
=> IN /OUT /INOUT


SELECT * FROM customers;

SELECT MIN(age),MAX(age),city FROM customers
WHERE city = "yangon";


DELIMITER //
CREATE PROCEDURE minmaxcuagebycity_proc(
     INOUT p_city VARCHAR(50),
     OUT p_minage INT,
     OUT p_maxage INT
)

BEGIN 
SELECT MIN(age),MAX(age) INTO p_minage,p_maxage FROM customers
WHERE city = p_city;
     
END; //

DELIMITER ;


SET @min:= 0;
SET @max :=0;
SET @city := "yangon";

CALL minmaxcuagebycity_proc(@city,@min,@max);

SELECT @city,@min,@max;
